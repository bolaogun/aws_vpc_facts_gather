---

# First task : Interrogating the VPC
#
# The "sts_" prefixed variables are set if role acquisition is required
# To have these variables set make sure you play the "assume_role" play prior
# to attempting to create the VPc resources
#
# We are using the variables set in the mains.yml file.
# The module gives us back its result,
# which contains information about our new VPC. 
# We register it in the variable my_vpc.
#
- name: Capture the requisite facts
  ec2_vpc_net_facts:
    aws_access_key:   "{{ sts_aws_access_key | default(omit) }}"
    aws_secret_key:   "{{ sts_aws_secret_key | default(omit) }}"
    security_token:   "{{ sts_security_token | default(omit) }}"
    region:           "{{ aws_region }}"
    filters:
      "tag:Name": "{{ inp_vpc_nm }}"
  register: vpc_facts

- name: Show variables for new VPC
  debug:
    var: vpc_facts
#    verbosity: 3

- name: Record VPC_ID for later
  set_fact:
     vpc_id: "{{ vpc_facts.vpcs[0].id }}"

- name: Capture Subnet facts
  ec2_vpc_subnet_facts:
    aws_access_key:   "{{ sts_aws_access_key | default(omit) }}"
    aws_secret_key:   "{{ sts_aws_secret_key | default(omit) }}"
    security_token:   "{{ sts_security_token | default(omit) }}"
    region:           "{{ aws_region }}"
    filters:
      vpc-id: "{{ vpc_id }}"
  register: subnet_facts

- name: Show subnet facts
  debug:
    var: subnet_facts
#    verbosity: 3

- name: Gather facts about a specific DHCP Option set by DhcpOptionId
  ec2_vpc_dhcp_options_facts:
    aws_access_key:   "{{ sts_aws_access_key | default(omit) }}"
    aws_secret_key:   "{{ sts_aws_secret_key | default(omit) }}"
    security_token:   "{{ sts_security_token | default(omit) }}"
    region:           "{{ aws_region }}"
    DhcpOptionsIds: "{{ vpc_facts.vpcs[0].dhcp_options_id }}"
  register: dhcp_facts

- name: Display DHCP facts
  debug: 
    var: dhcp_facts
#    verbosity: 3

- name: Capture NACL facts
  ec2_vpc_nacl_facts:
    aws_access_key:   "{{ sts_aws_access_key | default(omit) }}"
    aws_secret_key:   "{{ sts_aws_secret_key | default(omit) }}"
    security_token:   "{{ sts_security_token | default(omit) }}"
    region:           "{{ aws_region }}"
    filters:
      vpc-id: "{{ vpc_id }}"
  register: nacl_facts

- name: Show nacl facts
  debug:
    var: nacl_facts
#    verbosity: 3


#- name: Capture IGW facts
#  ec2_vpc_igw_facts:
#    aws_access_key:   "{{ sts_aws_access_key | default(omit) }}"
#    aws_secret_key:   "{{ sts_aws_secret_key | default(omit) }}"
#    security_token:   "{{ sts_security_token | default(omit) }}"
#    region:           "{{ aws_region }}"
#    filters:
#      vpc-id: "{{ vpc_id }}"
#  register: igw_facts
#
#- name: Show igw facts
#  debug:
#    var: igw_facts

- name: Capture NAT Gateway facts
  ec2_vpc_nat_gateway_facts:
    aws_access_key:   "{{ sts_aws_access_key | default(omit) }}"
    aws_secret_key:   "{{ sts_aws_secret_key | default(omit) }}"
    security_token:   "{{ sts_security_token | default(omit) }}"
    region:           "{{ aws_region }}"
    filters:
      vpc-id: "{{ vpc_id }}"
  register: ngw_facts

- name: Show nat gateway facts
  debug:
    var: ngw_facts

- name: Capture Routing Table Gateway facts
  ec2_vpc_route_table_facts:
    aws_access_key:   "{{ sts_aws_access_key | default(omit) }}"
    aws_secret_key:   "{{ sts_aws_secret_key | default(omit) }}"
    security_token:   "{{ sts_security_token | default(omit) }}"
    region:           "{{ aws_region }}"
    filters:
      vpc-id: "{{ vpc_id }}"
  register: route_tbl_facts

- name: Show Routing Tablefacts
  debug:
    var: route_tbl_facts

- name: Capture Virtual Gateway facts
  ec2_vpc_vgw_facts:
    aws_access_key:   "{{ sts_aws_access_key | default(omit) }}"
    aws_secret_key:   "{{ sts_aws_secret_key | default(omit) }}"
    security_token:   "{{ sts_security_token | default(omit) }}"
    region:           "{{ aws_region }}"
    #filters:
    #  vpc-id: "{{ vpc_id }}"
  register: vgw_facts


- name: Show VGW facts
  debug:
    msg: "Each VGW is thus: {{ item.vpc_attachments }}"
  with_items: "{{ vgw_facts.virtual_gateways }}" 
  when:
    - item.vpc_attachments[0].vpc_id ==  vpc_id 


